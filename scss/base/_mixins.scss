//
// $MIXINS
//

//Micro clearfix, as per: nicolasgallagher.com/micro-clearfix-hack
@mixin clearfix() {
  *zoom: 1;
  &:before,
  &:after {
    display: table;
    content: "";
  }
  &:after {
    clear: both;
  }
}

@mixin font-size($font-size, $base:$base-font-size) {
  font-size: $font-size;
  font-size: ($font-size / $base) * 1rem;
}

// Image replacement
@mixin hide-text() {
  border: 0;
  font: 0/0 a;
  text-shadow: none;
  color: transparent;
}

// Text overflow
// Requires inline-block or block for proper styling
@mixin text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Placeholder text
@mixin placeholder($color) {
  :-moz-placeholder {
    color: $color;
  }
  ::-webkit-input-placeholder {
    color: $color;
  }
}


// ***************************************************************************
// Retina images mixin
//
// via http://37signals.com/svn/posts/3271-easy-retina-ready-images-using-scss
// modified to calculate image dimensions automatically
//
// USAGE:
//
// .logo {
//    background: image-url("logo_32x32.png") no-repeat;
//    @include image-2x("logo_32x32@2x.png", 64px, 64px);
// }
//  
// OR
//
// .logo {
//    background: image-url("logo_32x32.png") no-repeat;
//    @include image-2x("logo_32x32@2x.png"); // no dimensions passed in
// }
//
// If dimensions are omitted, the mixin will try to guess them using 
// image-width andimage-height helpers. This only works if compass can find 
// the image file locally, however.
//
// ***************************************************************************
@mixin image-2x($image, $width:"", $height:"") {
  @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    // on retina, use image that is scaled by 2
    background-image: url($image);

    @if $width != "" {
      // dimensions ARE passed in, use them.
      @include background-size($width $height);
    } @else {
      // dimensions NOT passed in, try to calculate them automatically.
      @include background-size(floor(image-width($image)/2) floor(image-height($image)/2));
    }
  }
}


// ***************************************************************************
// Media query mixin
//
// All styles w/o a media-query are assumed to be base, mobile-first styles.
// All styling "up" from that should be done in media queries.
//
// Our options are:
//
// hand-and-down  -  isolates "phones"
// hand-and-up    -  bigger-than-phone and-up
// lap-and-up     -  "laptops" and-up
// desk-and-up    -  "desktops" and-up
// wall-and-up    -  widescreen desktops and-up
//
// Without one of these parameters the mixin will accept a custom media query
//
// ***************************************************************************
  
@mixin media-query($media-query){
  
  @if $legacy-ie == true {
    //render styles without media queries
    
    @if $media-query == "hand-and-up" { @content; }
    
    @else if $media-query == "lap-and-up" { @content; }
    
    @else if $media-query == "desk-and-up" { @content; }
    
    // exclude "wall and up", "lap-and-down", "hand-and-down"
     
    // include custom breakpoints
    @else {
      @content;
    }
  
  }
  @else {
  
    @if $media-query == "hand-and-up" {
      @media only screen and (min-width:$hand-start) { @content; }
    }

    @else if $media-query == "lap-and-up" {
      @media only screen and (min-width:$lap-start) { @content; }
    }

    @else if $media-query == "desk-and-up" {
      @media only screen and (min-width:$desk-start) { @content; }
    }
    
    @else if $media-query == "wall-and-up" {
      @media only screen and (min-width: $wall-start) { @content; }
    }
     
    @else if $media-query == "lap-and-down" {
      @media only screen and (max-width: ($lap-start - 1px)) { @content; }
    }
     
    @else if $media-query == "hand-and-down" {
      @media only screen and (max-width: ($hand-start - 1px)) { @content; }
    }
    
    // custom breakpoints
    @else {
      @media only screen and ($media-query) { @content; }
    }
  
  }
}